package com.gmail.nossr50.config.antiexploit;

import ninja.leaping.configurate.objectmapping.Setting;
import ninja.leaping.configurate.objectmapping.serialize.ConfigSerializable;

@ConfigSerializable
public class ConfigSectionExploitAcrobatics {

    private static final int ACROBATIC_LOCATION_LIMIT_DEFAULT = 50;
    private static final boolean PREVENT_ACROBATICS_ABUSE_DEFAULT = true;
    private static final int TELEPORT_COOLDOWN_DEFAULT = 30;
    private static final int ROLL_XP_GAIN_CD_DEFAULT = 3;

    @Setting(value = "Player-Fall-Location-Tracking",
            comment = "The amount of locations to keep track of for player falls." +
                    "\nThis setting does nothing if Prevent-Acrobatics-Farming is disabled" +
                    "\nEach player has their own individual list with up to 50 locations stored, locations are not shared between players." +
                    "\nPlayers cannot gain XP from falling in the same location twice." +
                    "\nIt's best you do not raise this number unless you have some kind of god computer," +
                    "\n mcMMO processes the entire tracked location list anytime a player takes fall damage so the bigger this is the more expensive that calculation is." +
                    "\nDefault value: " + ACROBATIC_LOCATION_LIMIT_DEFAULT)
    private int acrobaticLocationLimit = ACROBATIC_LOCATION_LIMIT_DEFAULT;

    @Setting(value = "Prevent-Acrobatics-Farming",
            comment = "Prevents many common exploits for farming Acrobatics XP" +
                    "\nEnabled tracking player fall locations" +
                    "\nEnables tracking when a player last teleported" +
                    "\nEnables tracking when a player last respawned" +
                    "\nDefault value: " + PREVENT_ACROBATICS_ABUSE_DEFAULT)
    private boolean preventAcrobaticsAbuse = PREVENT_ACROBATICS_ABUSE_DEFAULT;

    @Setting(value = "No-XP-After-Teleporting-Cooldown-In-Seconds", comment = "Prevents XP gains for Acrobatics for a set period of time after teleporting." +
            "\nDefault value: " + TELEPORT_COOLDOWN_DEFAULT)
    private int teleportCooldownSeconds = TELEPORT_COOLDOWN_DEFAULT;

    @Setting(value = "Fall-Damage-XP-Gain-Cooldown-In-Seconds", comment = "Prevent players from gaining XP from fall damage if they had gained XP recently." +
            "\nWhen players take fall damage again within this cooldown period the length of the cooldown is increased to discourage automated Roll XP farming." +
            "\nDefault value: " + ROLL_XP_GAIN_CD_DEFAULT)
    private int rollXPGainCooldownSeconds = ROLL_XP_GAIN_CD_DEFAULT;

    public int getRollXPGainCooldownSeconds() {
        return rollXPGainCooldownSeconds;
    }

    public int getTeleportCooldownSeconds() {
        return teleportCooldownSeconds;
    }

    public int getAcrobaticLocationLimit() {
        return acrobaticLocationLimit;
    }

    public boolean isPreventAcrobaticsAbuse() {
        return preventAcrobaticsAbuse;
    }
}
