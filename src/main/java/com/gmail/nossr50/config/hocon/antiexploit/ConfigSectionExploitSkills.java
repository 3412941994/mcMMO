package com.gmail.nossr50.config.hocon.antiexploit;

import ninja.leaping.configurate.objectmapping.Setting;
import ninja.leaping.configurate.objectmapping.serialize.ConfigSerializable;

@ConfigSerializable
public class ConfigSectionExploitSkills {
    @Setting(value = "Acrobatics", comment = "Exploit settings related to Acrobatics")
    private ConfigSectionExploitAcrobatics configSectionExploitAcrobatics = new ConfigSectionExploitAcrobatics();

    @Setting(value = "Fishing", comment = "Exploit settings related to Fishing")
    private ConfigSectionExploitFishing configSectionExploitFishing = new ConfigSectionExploitFishing();

    @Setting(value = "Mining", comment = "Exploit settings related to Mining")
    private ConfigSectionExploitMining configSectionExploitMining = new ConfigSectionExploitMining();

    public ConfigSectionExploitAcrobatics getConfigSectionExploitAcrobatics() {
        return configSectionExploitAcrobatics;
    }

    public ConfigSectionExploitFishing getConfigSectionExploitFishing() {
        return configSectionExploitFishing;
    }

    public ConfigSectionExploitMining getConfigSectionExploitMining() {
        return configSectionExploitMining;
    }

    public boolean isPreventCobblestoneStoneGeneratorXP() {
        return configSectionExploitMining.isPreventCobblestoneStoneGeneratorXP();
    }

    public long getFishingRodSpamMilliseconds() {
        return configSectionExploitFishing.getFishingRodSpamMilliseconds();
    }

    public double getOverFishingAreaSize() {
        return configSectionExploitFishing.getOverFishingAreaSize();
    }

    public boolean isPreventFishingExploits() {
        return configSectionExploitFishing.isPreventFishingExploits();
    }

    public int getOverfishingLimit() {
        return configSectionExploitFishing.getOverfishingLimit();
    }

    public boolean isAlertAdminsOnOverFishing() {
        return configSectionExploitFishing.isAlertAdminsOnOverFishing();
    }

    public int getRollXPGainCooldownSeconds() {
        return configSectionExploitAcrobatics.getRollXPGainCooldownSeconds();
    }

    public int getTeleportCooldownSeconds() {
        return configSectionExploitAcrobatics.getTeleportCooldownSeconds();
    }

    public int getAcrobaticLocationLimit() {
        return configSectionExploitAcrobatics.getAcrobaticLocationLimit();
    }

    public boolean isPreventAcrobaticsAbuse() {
        return configSectionExploitAcrobatics.isPreventAcrobaticsAbuse();
    }
}
